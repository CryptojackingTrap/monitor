/*
 * Copyright (C) 2004-2021 Intel Corporation.
 * SPDX-License-Identifier: MIT
 */

 /*! @file
  *  This file contains an ISA-portable PIN tool for tracing memory accesses.
  */

#include "pin.H"
#include <iostream>
#include <fstream>
#include <iomanip>
#include <time.h>

using std::cerr;
using std::dec;
using std::endl;
using std::hex;
using std::ios;
using std::setw;
using std::string;

/* ===================================================================== */
/* Global Variables */
/* ===================================================================== */

std::ofstream TraceFile;

/* ===================================================================== */
/* Commandline Switches */
/* ===================================================================== */

KNOB< string > KnobOutputFile(KNOB_MODE_WRITEONCE, "pintool", "o", "cryptojackingtrapMonitorLog.out", "specify trace file name");
KNOB< BOOL > KnobValues(KNOB_MODE_WRITEONCE, "pintool", "values", "1", "Output memory values reads");

/* ===================================================================== */
/* Print Help Message                                                    */
/* ===================================================================== */

static INT32 Usage()
{
    cerr << "This tool produces a memory address trace.\n"
        "For each (dynamic) instruction reading from memory read time and ea are recorded\n"
        "\n";

    cerr << KNOB_BASE::StringKnobSummary();

    cerr << endl;

    return -1;
}

static VOID EmitMem(VOID* ea, INT32 size)
{
    if (!KnobValues) return;

    switch (size)
    {
    case 0:
        TraceFile << setw(1);
        break;

    case 1:
        TraceFile << static_cast<UINT32>(*static_cast<UINT8*>(ea));
        break;

    case 2:
        TraceFile << *static_cast<UINT16*>(ea);
        break;

    case 4:
        TraceFile << *static_cast<UINT32*>(ea);
        break;

    case 8:
        TraceFile << *static_cast<UINT64*>(ea);
        break;

    default:
        TraceFile.unsetf(ios::showbase);
        TraceFile << setw(1) << "0x";
        for (INT32 i = 0; i < size; i++)
        {
            TraceFile << static_cast<UINT32>(static_cast<UINT8*>(ea)[i]);
        }
        TraceFile.setf(ios::showbase);
        break;
    }
}

/* ===================================================================== */
/* get current formatted date time                                       */
/* ===================================================================== */

const string getCurrentDateTime() {
    time_t     now = time(0);
    struct tm  tstruct;
    char       buf[80];
    tstruct = *localtime(&now);
    strftime(buf, sizeof(buf), "%Y/%m/%d %X", &tstruct);
    return buf;
}

static VOID RecordMem(VOID* ip, CHAR r, VOID* addr, INT32 size, BOOL isPrefetch)
{
    string time = getCurrentDateTime();
    TraceFile << time << " "
        //<< dec << setw(2) << size << " "
        << hex << setw(2 + 2 * sizeof(ADDRINT));
    if (!isPrefetch) EmitMem(addr, size);
    TraceFile << endl;
}

VOID Instruction(INS ins, VOID* v)
{
    // instruments loads using a predicated call, i.e.
    // the call happens iff the load will be actually executed

    if (INS_IsMemoryRead(ins) && INS_IsStandardMemop(ins))
    {
        INS_InsertPredicatedCall(ins, IPOINT_BEFORE, (AFUNPTR)RecordMem, IARG_INST_PTR, IARG_UINT32, 'R', IARG_MEMORYREAD_EA,
            IARG_MEMORYREAD_SIZE, IARG_BOOL, INS_IsPrefetch(ins), IARG_END);
    }

    if (INS_HasMemoryRead2(ins) && INS_IsStandardMemop(ins))
    {
        INS_InsertPredicatedCall(ins, IPOINT_BEFORE, (AFUNPTR)RecordMem, IARG_INST_PTR, IARG_UINT32, 'R', IARG_MEMORYREAD2_EA,
            IARG_MEMORYREAD_SIZE, IARG_BOOL, INS_IsPrefetch(ins), IARG_END);
    }
}

/* ===================================================================== */

VOID Fini(INT32 code, VOID* v)
{
    TraceFile << "#eof" << endl;

    TraceFile.close();
}

/* ===================================================================== */
/* Main                                                                  */
/* ===================================================================== */

int main(int argc, char* argv[])
{
    string trace_header = string("#\n"
        "# Memory Access Trace Generated By Cryptojackingtrap-Monitor\n"
        "#\n");

    if (PIN_Init(argc, argv))
    {
        return Usage();
    }

    TraceFile.open(KnobOutputFile.Value().c_str());
    TraceFile.write(trace_header.c_str(), trace_header.size());
    TraceFile.setf(ios::showbase);

    INS_AddInstrumentFunction(Instruction, 0);
    PIN_AddFiniFunction(Fini, 0);

    // Never returns

    PIN_StartProgram();

    return 0;
}

/* ===================================================================== */
/* eof */
/* ===================================================================== */
